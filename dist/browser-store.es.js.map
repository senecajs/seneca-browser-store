{"version":3,"file":"browser-store.es.js","sources":["../src/browser-store.ts"],"sourcesContent":["/* Copyright (c) 2023-2024 Richard Rodger and other contributors, MIT License */\n\nfunction BrowserStore(this: any, options: any) {\n  let seneca: any = this\n\n  let init = seneca.export('entity/init')\n\n  let ohr = options.handleResponse\n  let handleResponse = ['save', 'load', 'list', 'remove'].reduce(\n    (a: any, n) => ((a[n] = ohr[n] || ohr.any), a),\n    {},\n  )\n\n  const msglog: {\n    msg: any\n    meta: any\n    start: number\n    ctx?: any\n    apimsg?: any\n    res?: any\n    err?: any\n    apimeta?: any\n    apiend?: number\n    end?: number\n  }[] = []\n\n  function makeApiMsg(msg: any, ctx: any, options: any) {\n    let apimsg: any = {}\n    let apimsgtm = options.apimsg\n\n    for (let pn in apimsgtm) {\n      let pv = apimsgtm[pn]\n      if ('function' === typeof pv) {\n        apimsg[pn] = pv(msg, ctx, options)\n      } else {\n        apimsg[pn] = JSON.parse(JSON.stringify(pv))\n      }\n    }\n\n    return apimsg\n  }\n\n  let store = {\n    name: 'BrowserStore',\n\n    save: function (this: any, msg: any, reply: any, _meta: any) {\n      let logn = options.debug && logstart(arguments)\n      let ctx = options.prepareCtx(msg)\n      let apimsg = makeApiMsg(msg, ctx, options)\n\n      logn && logreq(logn, ctx, apimsg)\n      this.act(\n        apimsg,\n        function save_result(this: any, err: Error, res: any, apimeta: any) {\n          logn && logres(logn, arguments)\n          return handleResponse.save(\n            this,\n            ctx,\n            reply,\n            err,\n            res,\n            apimsg,\n            apimeta,\n            logn,\n          )\n        },\n      )\n    },\n\n    load: function (this: any, msg: any, reply: any, _meta: any) {\n      let logn = options.debug && logstart(arguments)\n      let ctx = options.prepareCtx(msg)\n      let apimsg = makeApiMsg(msg, ctx, options)\n\n      logn && logreq(logn, ctx, apimsg)\n      this.act(\n        apimsg,\n        function load_result(this: any, err: Error, res: any, apimeta: any) {\n          logn && logres(logn, arguments)\n          return handleResponse.load(\n            this,\n            ctx,\n            reply,\n            err,\n            res,\n            apimsg,\n            apimeta,\n            logn,\n          )\n        },\n      )\n    },\n\n    list: function (this: any, msg: any, reply: any, _meta: any) {\n      let logn = options.debug && logstart(arguments)\n      let ctx = options.prepareCtx(msg)\n      let apimsg = makeApiMsg(msg, ctx, options)\n\n      logn && logreq(logn, ctx, apimsg)\n      this.act(\n        apimsg,\n        function list_result(this: any, err: Error, res: any, apimeta: any) {\n          logn && logres(logn, arguments)\n          return handleResponse.list(\n            this,\n            ctx,\n            reply,\n            err,\n            res,\n            apimsg,\n            apimeta,\n            logn,\n          )\n        },\n      )\n    },\n\n    remove: function (this: any, msg: any, reply: any, _meta: any) {\n      let logn = options.debug && logstart(arguments)\n      let ctx = options.prepareCtx(msg)\n      let apimsg = makeApiMsg(msg, ctx, options)\n\n      logn && logreq(logn, ctx, apimsg)\n      this.act(\n        apimsg,\n        function remove_result(this: any, err: Error, res: any, apimeta: any) {\n          logn && logres(logn, arguments)\n          return handleResponse.remove(\n            this,\n            ctx,\n            reply,\n            err,\n            res,\n            apimsg,\n            apimeta,\n            logn,\n          )\n        },\n      )\n    },\n\n    close: function (this: any, _msg: any, reply: any) {\n      reply()\n    },\n\n    native: function (this: any, _msg: any, reply: any) {\n      reply()\n    },\n  }\n\n  let meta = init(seneca, options, store)\n\n  function logstart(args: any) {\n    let logn = options.debug && {\n      msg: args[0],\n      meta: args[2],\n      start: Date.now(),\n    }\n    logn && msglog.push(logn)\n    return logn\n  }\n\n  function logreq(logn: any, ctx: any, apimsg: any) {\n    logn.apistart = Date.now()\n    logn.ctx = ctx\n    logn.apimsg = apimsg\n    return logn\n  }\n\n  function logres(logn: any, args: any) {\n    logn.apiend = Date.now()\n    logn.err = args[0]\n    logn.res = args[1]\n    logn.apimeta = args[2]\n    return logn\n  }\n\n  return {\n    name: store.name,\n    tag: meta.tag,\n    exports: {\n      makeApiMsg,\n      msglog,\n    },\n  }\n}\n\nfunction canonStr(seneca: any, ctx: any) {\n  return seneca.entity(ctx.zone, ctx.base, ctx.name).canon$()\n}\n\nBrowserStore.defaults = {\n  debug: false,\n\n  apimsg: {\n    aim: 'req',\n    on: 'entity',\n    debounce$: true,\n    q: (msg: any, _ctx: any) => msg.q,\n    ent: (msg: any, _ctx: any) => msg.ent,\n    // cmd: (_msg: any, ctx: any) => ctx.cmd,\n    save: (_msg: any, ctx: any) => ('save' === ctx.cmd ? 'entity' : undefined),\n    load: (_msg: any, ctx: any) => ('load' === ctx.cmd ? 'entity' : undefined),\n    list: (_msg: any, ctx: any) => ('list' === ctx.cmd ? 'entity' : undefined),\n    remove: (_msg: any, ctx: any) =>\n      'remove' === ctx.cmd ? 'entity' : undefined,\n    store: (_msg: any, ctx: any) => ctx.store,\n    name: (_msg: any, ctx: any) => ctx.name,\n    base: (_msg: any, ctx: any) => ctx.base,\n    zone: (_msg: any, ctx: any) => ctx.zone,\n  },\n\n  prepareCtx: (msg: any, ctx: any) => {\n    ctx = ctx || {}\n\n    let q = msg.q\n    ctx.store = false !== q.store$\n    delete q.store$\n\n    ctx.cmd = msg.cmd\n\n    let ent = msg.ent || msg.qent\n\n    if (ent) {\n      if (ent.canon$) {\n        Object.assign(ctx, ent.canon$({ object: true }))\n      } else if (ent.entity$) {\n        let parts = ent.entity$.split('/')\n        Object.assign(ctx, {\n          zone: '-' === parts[0] ? null : parts[0],\n          base: '-' === parts[1] ? null : parts[1],\n          name: '-' === parts[2] ? null : parts[2],\n        })\n      }\n    }\n\n    return ctx\n  },\n\n  handleResponse: {\n    any: function (\n      seneca: any,\n      ctx: any,\n      reply: any,\n      err: Error,\n      res: any,\n      apimsg: any,\n      _apimeta: any,\n      logn: any,\n    ) {\n      logn && (logn.end = Date.now())\n\n      if (err) {\n        return reply(err)\n      }\n\n      // TODO: debounce response could be empty object - review\n      if ('entity' === apimsg.load && (null == res || null == res.ok)) {\n        return reply(null)\n      }\n\n      if (res && res.ok && res.item) {\n        let ent = seneca.entity({\n          zone: ctx.zone,\n          base: ctx.base,\n          name: ctx.name,\n        })\n        return reply(ent.make$().data$(res.item))\n      } else {\n        let err = res && res.err\n        err =\n          err ||\n          new Error(\n            `BrowserStore: ${ctx.cmd} ${canonStr(seneca, ctx)}: unknown error`,\n          )\n        return reply(err)\n      }\n    },\n\n    list: function (\n      seneca: any,\n      ctx: any,\n      reply: any,\n      err: Error,\n      res: any,\n      _apimsg: any,\n      _apimeta: any,\n      logn: any,\n    ) {\n      logn && (logn.end = Date.now())\n\n      if (err) {\n        reply(err)\n      }\n\n      if (res && res.ok && res.list) {\n        let ent = seneca.entity({\n          zone: ctx.zone,\n          base: ctx.base,\n          name: ctx.name,\n        })\n        let list = res.list.map((item: any) => ent.make$().data$(item))\n        logn && (logn.end = Date.now())\n        reply(list)\n      } else {\n        let err = res && res.err\n        err =\n          err ||\n          new Error(\n            `BrowserStore: ${ctx.cmd} ${canonStr(\n              seneca,\n              ctx,\n            )}: unknown list error`,\n          )\n        reply(err)\n      }\n    },\n  },\n}\n\n// Prevent name mangling\nObject.defineProperty(BrowserStore, 'name', { value: 'BrowserStore' })\n\nexport default BrowserStore\n"],"names":["BrowserStore","options","seneca","init","ohr","handleResponse","a","n","msglog","makeApiMsg","msg","ctx","apimsg","apimsgtm","pn","pv","store","reply","_meta","logn","logstart","logreq","err","res","apimeta","logres","_msg","meta","args","canonStr","_ctx","q","ent","parts","_apimeta","_apimsg","list","item"],"mappings":"AAEA,SAASA,EAAwBC,GAAc;AAC7C,MAAIC,IAAc,MAEdC,IAAOD,EAAO,OAAO,aAAa,GAElCE,IAAMH,EAAQ,gBACdI,IAAiB,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,EAAE;AAAA,IACtD,CAACC,GAAQC,OAAQD,EAAEC,CAAC,IAAIH,EAAIG,CAAC,KAAKH,EAAI,KAAME;AAAA,IAC5C,CAAC;AAAA,EAAA;AAGH,QAAME,IAWA,CAAA;AAEG,WAAAC,EAAWC,GAAUC,GAAUV,GAAc;AACpD,QAAIW,IAAc,CAAA,GACdC,IAAWZ,EAAQ;AAEvB,aAASa,KAAMD,GAAU;AACnB,UAAAE,IAAKF,EAASC,CAAE;AAChB,MAAe,OAAOC,KAAtB,aACFH,EAAOE,CAAE,IAAIC,EAAGL,GAAKC,GAAKV,CAAO,IAEjCW,EAAOE,CAAE,IAAI,KAAK,MAAM,KAAK,UAAUC,CAAE,CAAC;AAAA,IAE9C;AAEO,WAAAH;AAAA,EACT;AAEA,MAAII,IAAQ;AAAA,IACV,MAAM;AAAA,IAEN,MAAM,SAAqBN,GAAUO,GAAYC,GAAY;AAC3D,UAAIC,IAAOlB,EAAQ,SAASmB,EAAS,SAAS,GAC1CT,IAAMV,EAAQ,WAAWS,CAAG,GAC5BE,IAASH,EAAWC,GAAKC,GAAKV,CAAO;AAEjC,MAAAkB,KAAAE,EAAOF,GAAMR,GAAKC,CAAM,GAC3B,KAAA;AAAA,QACHA;AAAA,QACA,SAAgCU,GAAYC,GAAUC,GAAc;AAC1D,iBAAAL,KAAAM,EAAON,GAAM,SAAS,GACvBd,EAAe;AAAA,YACpB;AAAA,YACAM;AAAA,YACAM;AAAA,YACAK;AAAA,YACAC;AAAA,YACAX;AAAA,YACAY;AAAA,YACAL;AAAA,UAAA;AAAA,QAEJ;AAAA,MAAA;AAAA,IAEJ;AAAA,IAEA,MAAM,SAAqBT,GAAUO,GAAYC,GAAY;AAC3D,UAAIC,IAAOlB,EAAQ,SAASmB,EAAS,SAAS,GAC1CT,IAAMV,EAAQ,WAAWS,CAAG,GAC5BE,IAASH,EAAWC,GAAKC,GAAKV,CAAO;AAEjC,MAAAkB,KAAAE,EAAOF,GAAMR,GAAKC,CAAM,GAC3B,KAAA;AAAA,QACHA;AAAA,QACA,SAAgCU,GAAYC,GAAUC,GAAc;AAC1D,iBAAAL,KAAAM,EAAON,GAAM,SAAS,GACvBd,EAAe;AAAA,YACpB;AAAA,YACAM;AAAA,YACAM;AAAA,YACAK;AAAA,YACAC;AAAA,YACAX;AAAA,YACAY;AAAA,YACAL;AAAA,UAAA;AAAA,QAEJ;AAAA,MAAA;AAAA,IAEJ;AAAA,IAEA,MAAM,SAAqBT,GAAUO,GAAYC,GAAY;AAC3D,UAAIC,IAAOlB,EAAQ,SAASmB,EAAS,SAAS,GAC1CT,IAAMV,EAAQ,WAAWS,CAAG,GAC5BE,IAASH,EAAWC,GAAKC,GAAKV,CAAO;AAEjC,MAAAkB,KAAAE,EAAOF,GAAMR,GAAKC,CAAM,GAC3B,KAAA;AAAA,QACHA;AAAA,QACA,SAAgCU,GAAYC,GAAUC,GAAc;AAC1D,iBAAAL,KAAAM,EAAON,GAAM,SAAS,GACvBd,EAAe;AAAA,YACpB;AAAA,YACAM;AAAA,YACAM;AAAA,YACAK;AAAA,YACAC;AAAA,YACAX;AAAA,YACAY;AAAA,YACAL;AAAA,UAAA;AAAA,QAEJ;AAAA,MAAA;AAAA,IAEJ;AAAA,IAEA,QAAQ,SAAqBT,GAAUO,GAAYC,GAAY;AAC7D,UAAIC,IAAOlB,EAAQ,SAASmB,EAAS,SAAS,GAC1CT,IAAMV,EAAQ,WAAWS,CAAG,GAC5BE,IAASH,EAAWC,GAAKC,GAAKV,CAAO;AAEjC,MAAAkB,KAAAE,EAAOF,GAAMR,GAAKC,CAAM,GAC3B,KAAA;AAAA,QACHA;AAAA,QACA,SAAkCU,GAAYC,GAAUC,GAAc;AAC5D,iBAAAL,KAAAM,EAAON,GAAM,SAAS,GACvBd,EAAe;AAAA,YACpB;AAAA,YACAM;AAAA,YACAM;AAAA,YACAK;AAAA,YACAC;AAAA,YACAX;AAAA,YACAY;AAAA,YACAL;AAAA,UAAA;AAAA,QAEJ;AAAA,MAAA;AAAA,IAEJ;AAAA,IAEA,OAAO,SAAqBO,GAAWT,GAAY;AAC3C,MAAAA;IACR;AAAA,IAEA,QAAQ,SAAqBS,GAAWT,GAAY;AAC5C,MAAAA;IACR;AAAA,EAAA,GAGEU,IAAOxB,EAAKD,GAAQD,GAASe,CAAK;AAEtC,WAASI,EAASQ,GAAW;AACvB,QAAAT,IAAOlB,EAAQ,SAAS;AAAA,MAC1B,KAAK2B,EAAK,CAAC;AAAA,MACX,MAAMA,EAAK,CAAC;AAAA,MACZ,OAAO,KAAK,IAAI;AAAA,IAAA;AAEV,WAAAT,KAAAX,EAAO,KAAKW,CAAI,GACjBA;AAAA,EACT;AAES,WAAAE,EAAOF,GAAWR,GAAUC,GAAa;AAC3C,WAAAO,EAAA,WAAW,KAAK,OACrBA,EAAK,MAAMR,GACXQ,EAAK,SAASP,GACPO;AAAA,EACT;AAES,WAAAM,EAAON,GAAWS,GAAW;AAC/B,WAAAT,EAAA,SAAS,KAAK,OACdA,EAAA,MAAMS,EAAK,CAAC,GACZT,EAAA,MAAMS,EAAK,CAAC,GACZT,EAAA,UAAUS,EAAK,CAAC,GACdT;AAAA,EACT;AAEO,SAAA;AAAA,IACL,MAAMH,EAAM;AAAA,IACZ,KAAKW,EAAK;AAAA,IACV,SAAS;AAAA,MACP,YAAAlB;AAAA,MACA,QAAAD;AAAA,IACF;AAAA,EAAA;AAEJ;AAEA,SAASqB,EAAS3B,GAAaS,GAAU;AAChC,SAAAT,EAAO,OAAOS,EAAI,MAAMA,EAAI,MAAMA,EAAI,IAAI,EAAE;AACrD;AAEAX,EAAa,WAAW;AAAA,EACtB,OAAO;AAAA,EAEP,QAAQ;AAAA,IACN,KAAK;AAAA,IACL,IAAI;AAAA,IACJ,WAAW;AAAA,IACX,GAAG,CAACU,GAAUoB,MAAcpB,EAAI;AAAA,IAChC,KAAK,CAACA,GAAUoB,MAAcpB,EAAI;AAAA;AAAA,IAElC,MAAM,CAACgB,GAAWf,MAAyBA,EAAI,QAAf,SAAqB,WAAW;AAAA,IAChE,MAAM,CAACe,GAAWf,MAAyBA,EAAI,QAAf,SAAqB,WAAW;AAAA,IAChE,MAAM,CAACe,GAAWf,MAAyBA,EAAI,QAAf,SAAqB,WAAW;AAAA,IAChE,QAAQ,CAACe,GAAWf,MACLA,EAAI,QAAjB,WAAuB,WAAW;AAAA,IACpC,OAAO,CAACe,GAAWf,MAAaA,EAAI;AAAA,IACpC,MAAM,CAACe,GAAWf,MAAaA,EAAI;AAAA,IACnC,MAAM,CAACe,GAAWf,MAAaA,EAAI;AAAA,IACnC,MAAM,CAACe,GAAWf,MAAaA,EAAI;AAAA,EACrC;AAAA,EAEA,YAAY,CAACD,GAAUC,MAAa;AAClC,IAAAA,IAAMA,KAAO;AAEb,QAAIoB,IAAIrB,EAAI;AACR,IAAAC,EAAA,QAAkBoB,EAAE,WAAZ,IACZ,OAAOA,EAAE,QAETpB,EAAI,MAAMD,EAAI;AAEV,QAAAsB,IAAMtB,EAAI,OAAOA,EAAI;AAEzB,QAAIsB;AACF,UAAIA,EAAI;AACC,eAAA,OAAOrB,GAAKqB,EAAI,OAAO,EAAE,QAAQ,GAAM,CAAA,CAAC;AAAA,eACtCA,EAAI,SAAS;AACtB,YAAIC,IAAQD,EAAI,QAAQ,MAAM,GAAG;AACjC,eAAO,OAAOrB,GAAK;AAAA,UACjB,MAAcsB,EAAM,CAAC,MAAf,MAAmB,OAAOA,EAAM,CAAC;AAAA,UACvC,MAAcA,EAAM,CAAC,MAAf,MAAmB,OAAOA,EAAM,CAAC;AAAA,UACvC,MAAcA,EAAM,CAAC,MAAf,MAAmB,OAAOA,EAAM,CAAC;AAAA,QAAA,CACxC;AAAA,MACH;AAAA;AAGK,WAAAtB;AAAA,EACT;AAAA,EAEA,gBAAgB;AAAA,IACd,KAAK,SACHT,GACAS,GACAM,GACAK,GACAC,GACAX,GACAsB,GACAf,GACA;AAGA,UAFSA,MAAAA,EAAK,MAAM,KAAK,IAAI,IAEzBG;AACF,eAAOL,EAAMK,CAAG;AAIlB,UAAiBV,EAAO,SAApB,aAAqCW,KAAR,QAAuBA,EAAI,MAAZ;AAC9C,eAAON,EAAM,IAAI;AAGnB,UAAIM,KAAOA,EAAI,MAAMA,EAAI,MAAM;AACzB,YAAAS,IAAM9B,EAAO,OAAO;AAAA,UACtB,MAAMS,EAAI;AAAA,UACV,MAAMA,EAAI;AAAA,UACV,MAAMA,EAAI;AAAA,QAAA,CACX;AACD,eAAOM,EAAMe,EAAI,MAAA,EAAQ,MAAMT,EAAI,IAAI,CAAC;AAAA,MAAA,OACnC;AACDD,YAAAA,IAAMC,KAAOA,EAAI;AACrBD,eAAAA,IACEA,KACA,IAAI;AAAA,UACF,iBAAiBX,EAAI,GAAG,IAAIkB,EAAS3B,GAAQS,CAAG,CAAC;AAAA,QAAA,GAE9CM,EAAMK,CAAG;AAAA,MAClB;AAAA,IACF;AAAA,IAEA,MAAM,SACJpB,GACAS,GACAM,GACAK,GACAC,GACAY,GACAD,GACAf,GACA;AAOA,UANSA,MAAAA,EAAK,MAAM,KAAK,IAAI,IAEzBG,KACFL,EAAMK,CAAG,GAGPC,KAAOA,EAAI,MAAMA,EAAI,MAAM;AACzB,YAAAS,IAAM9B,EAAO,OAAO;AAAA,UACtB,MAAMS,EAAI;AAAA,UACV,MAAMA,EAAI;AAAA,UACV,MAAMA,EAAI;AAAA,QAAA,CACX,GACGyB,IAAOb,EAAI,KAAK,IAAI,CAACc,MAAcL,EAAI,MAAM,EAAE,MAAMK,CAAI,CAAC;AACrD,QAAAlB,MAAAA,EAAK,MAAM,KAAK,IAAI,IAC7BF,EAAMmB,CAAI;AAAA,MAAA,OACL;AACDd,YAAAA,IAAMC,KAAOA,EAAI;AACrBD,QAAAA,IACEA,KACA,IAAI;AAAA,UACF,iBAAiBX,EAAI,GAAG,IAAIkB;AAAA,YAC1B3B;AAAA,YACAS;AAAA,UACD,CAAA;AAAA,QAAA,GAELM,EAAMK,CAAG;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;AAGA,OAAO,eAAetB,GAAc,QAAQ,EAAE,OAAO,gBAAgB;"}